// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../redux
//   ../../@brightsign/bsdatamodel
//   ../../@brightsign/bscore

import { Action } from 'redux';
import { Dispatch } from 'redux';
import { ActionCreator } from 'redux';
import { Reducer } from 'redux';
import { DmState } from '@brightsign/bsdatamodel';
import { BsAssetLocator } from '@brightsign/bscore';

/** @module Model:index */

/** @module Types:index */

/** @module Model:base */
export const BRIGHTSIGN_PLAYER_MODEL_BATCH = "BRIGHTSIGN_PLAYER_MODEL_BATCH";
export const BRIGHTSIGN_PLAYER_MODEL_REHYDRATE = "BRIGHTSIGN_PLAYER_MODEL_REHYDRATE";
export const BRIGHTSIGN_PLAYER_MODEL_RESET = "BRIGHTSIGN_PLAYER_MODEL_RESET";
export type BsBspModelDispatch = Dispatch<any>;
export interface BsBspModelBaseAction extends Action {
    type: string;
    payload: {};
    error?: boolean;
    meta?: {};
}
export interface BsBspModelAction<T> extends BsBspModelBaseAction {
    payload: T;
}
export type BsBspActionCreator<T> = ActionCreator<BsBspModelAction<T>>;
export type BsBspModelThunkAction<T> = (dispatch: BsBspModelDispatch, getState: () => BsBspModelState, extraArgument: undefined) => T;
export const bsBspBatchAction: (action: BsBspModelBaseAction[]) => BsBspModelBatchAction;
export interface BsBspModelBatchAction extends Action {
    type: string;
    payload: BsBspModelBaseAction[];
}
export interface RehydrateBsBspModelParams {
    newBsBrightSignPlayerModelState: BsBspModelState;
}
export type RehydrateBsBspModelAction = BsBspModelAction<RehydrateBsBspModelParams>;
export const bsBrightSignPlayerRehydrateModel: (bsBrightSignPlayerState: BsBspModelState) => RehydrateBsBspModelAction;
export type ResetBsBspModelAction = BsBspModelAction<null>;
export const bsBrightSignPlayerResetModel: () => ResetBsBspModelAction;

/** @module Model:base */
/** @private */
export type BsBrightSignPlayerReducer = Reducer<BsBspModelState>;
/** @private */
export const enableBatching: (reduce: (state: BsBspModelState, action: BsBspModelBaseAction | BsBspModelBatchAction) => BsBspModelState) => BsBrightSignPlayerReducer;
export const bsBspReducer: Reducer<BsBspModelState>;
/** @private */
export function isValidBsBrightSignPlayerModelState(state: any): boolean;
/** @private */
export function isValidBsBrightSignPlayerModelStateShallow(state: any): boolean;

/** @module Model:template */
export const ADD_HSM: string;
export const SET_HSM_TOP: string;
export const SET_HSM_INITIALIZED: string;
export const SET_HSM_DATA: string;
export const ADD_HSTATE = "ADD_HSTATE";
export const SET_ACTIVE_HSTATE = "SET_ACTIVE_HSTATE";
export const SET_HSTATE_DATA = "SET_HSTATE_DATA";
export type AddHsmAction = BsBspModelAction<Partial<BspHsm>>;
export function addHsm(hsm: BspHsm): AddHsmAction;
export type SetHsmTopAction = BsBspModelAction<{}>;
export function setHsmTop(hsmId: string, topStateId: string): SetHsmTopAction;
export type SetHsmInitializedAction = BsBspModelAction<Partial<BspHsm>>;
export function setHsmInitialized(id: string, initialized: boolean): SetHsmInitializedAction;
export type SetHsmDataAction = BsBspModelAction<Partial<BspHsm>>;
export function setHsmData(id: string, hsmData: HsmData): SetHsmDataAction;
export type SetActiveHStateAction = BsBspModelAction<BspHState | null | any>;
export function setActiveHState(hsmId: string, activeState: BspHState | null): SetActiveHStateAction;
export type AddHStateAction = BsBspModelAction<Partial<BspHState>>;
export function addHState(hState: BspHState): AddHStateAction;
export type SetHStateDataAction = BsBspModelAction<Partial<BspHState>>;
export function setHStateData(id: string, hStateData: HStateData): SetHStateDataAction;
export const hsmReducer: import("redux").Reducer<BspHsmState>;
/** @private */
export const isValidHsmState: (state: any) => boolean;

/** @module Types:base */
export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export interface LUT {
    [key: string]: any;
}
export interface BsBspModelState {
    hsmState: BspHsmState;
    presentationData: PresentationDataState;
}
export interface BsBspState {
    bsdm: DmState;
    bsPlayer: BsBspModelState;
}
export interface BspBaseObject {
    id: string;
}
export interface BspMap<T extends BspBaseObject> {
    [id: string]: T;
}
export interface BsBspBaseAction extends Action {
    type: string;
    payload: {} | null;
    error?: boolean;
    meta?: {};
}
export interface BsBspAction<T> extends BsBspBaseAction {
    payload: T;
}
export type BsBspDispatch = Dispatch<BsBspState>;
export type BsBspVoidThunkAction = (dispatch: BsBspDispatch, getState: () => BsBspState, extraArgument: undefined) => void;
export type BsBspStringThunkAction = (dispatch: BsBspDispatch, getState: () => BsBspState, extraArgument: undefined) => string;
export type BsBspVoidPromiseThunkAction = (dispatch: BsBspDispatch, getState: () => BsBspState, extraArgument: undefined) => Promise<void>;
export type BsBspThunkAction<T> = (dispatch: BsBspDispatch, getState: () => BsBspState, extraArgument: undefined) => BsBspAction<T>;
export type BsBspAnyPromiseThunkAction = (dispatch: BsBspDispatch, getState: () => BsBspState, extraArgument: undefined) => Promise<any>;

export type BspHsmMap = BspMap<BspHsm>;
export type BspHStateMap = BspMap<BspHState>;
export interface BspHsmState {
    hsmById: BspHsmMap;
    hStateById: BspHStateMap;
    activeHStateByHsm: BspHStateMap;
}
export interface BspHsm {
    id: string;
    name: string;
    type: BspHsmType;
    topStateId: string;
    activeStateId: string | null;
    initialized: boolean;
    hsmData?: HsmData;
}
export type HsmData = ZoneHsmData | MediaZoneHsmData;
export interface ZoneHsmData {
    zoneId: string;
    x: number;
    y: number;
    width: number;
    height: number;
    initialMediaStateId: string;
}
export interface MediaZoneHsmData extends ZoneHsmData {
    mediaStateIdToHState: LUT;
}
export interface BspHState {
    id: string;
    type: BspStateType;
    hsmId: string;
    superStateId: string;
    hStateData?: HStateData;
}
export interface MediaHState extends BspHState {
    mediaStateId: string;
}
export type HStateData = PlayerHStateData | MediaHStateData;
export interface PlayerHStateData {
    name: string;
}
export interface MediaHStateData {
    mediaStateId: string;
    timeout?: any;
}
export interface HSMStateData {
    nextStateId: string | null;
}

export class BspHsmType {
    static Player: string;
}
export class BspStateType {
    static Top: string;
    static Player: string;
    static Playing: string;
    static Waiting: string;
    static Image: string;
}

export interface ArEventType {
    EventType: string;
    data?: any;
    EventData?: any;
}
export interface ArSyncSpecHash {
    method: string;
    hex: string;
}
export interface ArSyncSpecDownload {
    name: string;
    hash: ArSyncSpecHash;
    size: number;
    link: string;
}
export interface ArSyncSpecFiles {
    download: ArSyncSpecDownload[];
    ignore: any;
    delete: any;
}
export interface ArSyncSpec {
    meta: any;
    files: any;
}
export interface ArFileLUT {
    [fileName: string]: string;
}
export interface SubscribedEvents {
    [eventKey: string]: BspHState;
}
export interface ArState {
    bsdm?: DmState;
    stateMachine?: any;
    stateName?: string;
}

export interface PresentationDataState {
    platform: string;
    srcDirectory: string;
    syncSpec: ArSyncSpec | null;
    autoSchedule: BspSchedule | null;
}

export interface BspSchedule {
    scheduledPresentations: ScheduledPresentation[];
}
export interface ScheduledPresentation {
    presentationToSchedule: ScheduledPresentationFileData;
    presentationLocator: BsAssetLocator;
    dateTime: string;
    duration: number;
    allDayEveryDay: boolean;
    recurrence: boolean;
    recurrencePattern: string;
    recurrencePatternDaily: string;
    recurrencePatternDaysOfWeek: number;
    recurrenceStartDate: string;
    recurrenceGoesForever: boolean;
    recurrenceEndDate: string;
    interruption: boolean;
}
export interface ScheduledPresentationFileData {
    name: string;
    fileName: string;
    filePath: string;
}

